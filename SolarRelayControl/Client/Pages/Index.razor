@page "/"
@using SolarRelayControl.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<PageTitle>Historie</PageTitle>

<h1>Historie</h1>
<hr />

@if (logs == null)
{
    <p><em>Laden...</em></p>
}
else
{
    @if (relayStatus != null)
    {
        <div class="table-responsive">
            <table class="table table-borderless table-sm" style="width: auto">
                <tbody>
                    <tr>
                        <th scope="row">
                            <p>Relais Status: </p>
                        </th>
                        @if (relayStatus.IsOn)
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-bolt" style="color: #ffd500;"></i>
                            </td>
                            <td>
                                <p>An</p>
                            </td>
                        }
                        else
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-bolt"></i>
                            </td>
                            <td>
                                <p>Aus</p>
                            </td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">
                            <p>Aktuelle Leistung: </p>
                        </th>
                        @if (relayStatus.CurrentPower != null)
                        {
                            <td style="text-align: center">
                                @if (relayStatus.CurrentPower == 0)
                                {
                                    <i class="fa-solid fa-bolt"></i>
                                }
                                else
                                {
                                    <i class="fa-solid fa-bolt" style="color: #ffd500;"></i>
                                }
                            </td>
                            <td>
                                <p>@Math.Round(relayStatus.CurrentPower.Value / 1000, 2) kW</p>
                            </td>
                        }
                        else
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-bolt"></i>
                            </td>
                            <td>
                                <p>N/A</p>
                            </td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">
                            <p>Kumulierte Leistung: </p>
                        </th>
                        @if (relayStatus.TotalPower != null)
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-plug"></i>
                            </td>
                            <td>
                                <p>@Math.Round(relayStatus.TotalPower.Value / 1000, 2) kW</p>
                            </td>
                        }
                        else
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-plug"></i>
                            </td>
                            <td>
                                <p>N/A</p>
                            </td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">
                            <p>Relais Temperatur: </p>
                        </th>
                        @if (relayStatus.Temperature != null)
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-temperature-half"></i>
                            </td>
                            <td>
                                <p>@relayStatus.Temperature °C</p>
                            </td>
                        }
                        else
                        {
                            <td style="text-align: center">
                                <i class="fa-solid fa-temperature-half"></i>
                            </td>
                            <td>
                                <p>N/A</p>
                            </td>
                        }

                    </tr>
                </tbody>
            </table>
        </div>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Zeitpunkt</th>
                <th>PV Leistung</th>
                <th>Akku-Füllstand</th>
                <th>Aktion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in logs)
            {
                <tr>
                    <td>@entry.Timestamp.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</td>
                    <td>@entry.CurrentPower.ToString() kW</td>
                    <td>
                        <div class="progress">
                            <div role="progressbar" style="width: @entry.CurrentSoc.ToString()%;" aria-valuenow="@entry.CurrentSoc.ToString()" aria-valuemin="0" aria-valuemax="100" class="@(entry.CurrentSoc > 66 ? "progress-bar bg-success" : entry.CurrentSoc < 33 ? "progress-bar bg-danger" : "progress-bar bg-warning")">
                                @entry.CurrentSoc.ToString()%
                            </div>
                        </div>
                    </td>
                    <td>@entry.Action.ToString() </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<LogEntry>? logs;
    private RelayStatus? relayStatus;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/communicationhub"))
            .Build();

        hubConnection.On<LogEntry>("ReceiveLog", log =>
        {
            logs = logs?.Append(log).ToArray();
            StateHasChanged();
        });

        hubConnection.On<RelayStatus>("ReceiveRelayStatus", status =>
        {
            relayStatus = status;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        relayStatus = await hubConnection.InvokeAsync<RelayStatus>("GetRelayStatus");
        logs = await hubConnection.InvokeAsync<IEnumerable<LogEntry>>("GetLogs");
        logs = logs?.OrderByDescending(l => l.Timestamp).ToArray();
    }
}
